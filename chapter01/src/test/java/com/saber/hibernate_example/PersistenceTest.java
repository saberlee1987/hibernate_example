package com.saber.hibernate_example;

import com.saber.hibernate_example.chapter2.entities.MessageEntity;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class PersistenceTest {
    Connection connection() throws SQLException {
        return DriverManager.getConnection("jdbc:h2:./db1", "sa", "sa");
    }


    @BeforeClass
    public void beforeTest() {
        final String drop = "drop table messages if exists ";
        final String create = "create table messages (id int generated by default as identity primary key , text varchar(256) not null )";

        try (Connection connection = connection()) {

            try (PreparedStatement preparedStatement = connection.prepareStatement(drop)) {
                int rowAffected = preparedStatement.executeUpdate();
                System.out.println("row affected drop ====> " + rowAffected);
            }

            try (PreparedStatement preparedStatement = connection.prepareStatement(create)) {
                int rowAffected = preparedStatement.executeUpdate();
                System.out.println("row affected  create ====> " + rowAffected);
            }


        } catch (Exception ex) {
            System.out.println("Error =====> " + ex.getMessage());
        }
    }


    private MessageEntity saveMessage(String text) {
        final String insert = "insert into messages(text) values (?)";
        MessageEntity entity = null;

        try (Connection connection = connection();
             PreparedStatement ps = connection.prepareStatement(insert, Statement.RETURN_GENERATED_KEYS)) {

            ps.setString(1, text);
            int insertedRow = ps.executeUpdate();
            System.out.println("insertRow ===> " + insertedRow);
            try (ResultSet keys = ps.getGeneratedKeys()) {
                if (!keys.next()) {
                    throw new SQLException("No generated keys");
                }
                entity = new MessageEntity(keys.getLong(1), text);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex.getMessage());
        }
        return entity;
    }

    @Test
    public void readMessage() {
        final String text = "Hello World !!";
        MessageEntity entity = saveMessage(text);

        final String select = "select * from messages";

        List<MessageEntity> entities = new ArrayList<>();

        try (Connection connection = connection();
             PreparedStatement ps = connection.prepareStatement(select);
             ResultSet resultSet = ps.executeQuery();) {
            while (resultSet.next()) {
                MessageEntity newMessage = new MessageEntity();
                newMessage.setId(resultSet.getLong("id"));
                newMessage.setText(resultSet.getString("text"));
                entities.add(newMessage);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        Assert.assertEquals(entities.size(), 1);
        entities.forEach(System.out::println);
        Assert.assertEquals(entities.get(0), entity);
    }
}
